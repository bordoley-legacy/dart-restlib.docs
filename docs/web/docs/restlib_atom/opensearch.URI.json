{"name":"URI","qualifiedName":"restlib_atom/opensearch.URI","comment":"","isAbstract":true,"superclass":"restlib_atom/opensearch.IRI","implements":[],"subclass":[],"variables":{"parser":{"name":"parser","qualifiedName":"restlib_atom/opensearch.URI.parser","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"parsing.Parser","inner":[{"outer":"restlib_atom/opensearch.URI","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"authority":{"name":"authority","qualifiedName":"restlib_atom/opensearch.URI.authority","comment":"","commentFrom":"opensearch.IRI.authority","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"collections.Option","inner":[{"outer":"net.Authority","inner":[]}]}],"parameters":{},"annotations":[]},"path":{"name":"path","qualifiedName":"restlib_atom/opensearch.URI.path","comment":"","commentFrom":"opensearch.IRI.path","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"net.Path","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"restlib_atom/opensearch.URI.URI-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]},"authority":{"name":"authority","optional":true,"named":true,"default":false,"type":[{"outer":"net.Authority","inner":[]}],"value":"null","annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"net.Path","inner":[]}],"value":"null","annotations":[]},"query":{"name":"query","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]},"fragment":{"name":"fragment","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]},"tag":{"name":"tag","qualifiedName":"restlib_atom/opensearch.URI.URI-tag","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"parameters":{"authorityAddress":{"name":"authorityAddress","optional":true,"named":true,"default":false,"type":[{"outer":"net.IPAddress","inner":[]}],"value":"null","annotations":[]},"authorityDomain":{"name":"authorityDomain","optional":true,"named":true,"default":false,"type":[{"outer":"net.DomainName","inner":[]}],"value":"null","annotations":[]},"date":{"name":"date","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]},"specificPath":{"name":"specificPath","optional":true,"named":true,"default":false,"type":[{"outer":"net.Path","inner":[]}],"value":"null","annotations":[]},"query":{"name":"query","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]},"fragment":{"name":"fragment","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"relativeReference":{"name":"relativeReference","qualifiedName":"restlib_atom/opensearch.URI.relativeReference","comment":"","commentFrom":"opensearch.URI.relativeReference","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"parameters":{"base":{"name":"base","optional":false,"named":false,"default":false,"type":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"value":"null","annotations":[]},"relative":{"name":"relative","optional":false,"named":false,"default":false,"type":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"canonicalize":{"name":"canonicalize","qualifiedName":"restlib_atom/opensearch.URI.canonicalize","comment":"","commentFrom":"opensearch.IRI.canonicalize","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"restlib_atom/opensearch.URI.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>restlib_atom/opensearch.URI.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"restlib_atom/opensearch.URI.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"scheme":{"name":"scheme","qualifiedName":"restlib_atom/opensearch.URI.scheme","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.scheme","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"authority":{"name":"authority","qualifiedName":"restlib_atom/opensearch.URI.authority","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.authority","static":false,"abstract":true,"constant":false,"return":[{"outer":"collections.Option","inner":[{"outer":"net.IAuthority","inner":[]}]}],"parameters":{},"annotations":[]},"path":{"name":"path","qualifiedName":"restlib_atom/opensearch.URI.path","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.path","static":false,"abstract":true,"constant":false,"return":[{"outer":"net.IPath","inner":[]}],"parameters":{},"annotations":[]},"query":{"name":"query","qualifiedName":"restlib_atom/opensearch.URI.query","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.query","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"fragment":{"name":"fragment","qualifiedName":"restlib_atom/opensearch.URI.fragment","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.fragment","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"isAbsolute":{"name":"isAbsolute","qualifiedName":"restlib_atom/opensearch.URI.isAbsolute","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.isAbsolute","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"restlib_atom/opensearch.URI.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>restlib_atom/opensearch.URI.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>restlib_atom/opensearch.URI.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"restlib_atom/opensearch.URI.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"restlib_atom/opensearch.URI.noSuchMethod","comment":"<p><a>restlib_atom/opensearch.URI.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>restlib_atom/opensearch.URI.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>restlib_atom/opensearch.URI.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>restlib_atom/opensearch.URI.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"canonicalize":{"name":"canonicalize","qualifiedName":"restlib_atom/opensearch.URI.canonicalize","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.canonicalize","static":false,"abstract":true,"constant":false,"return":[{"outer":"restlib_atom/opensearch.IRI","inner":[]}],"parameters":{},"annotations":[]},"toIRI":{"name":"toIRI","qualifiedName":"restlib_atom/opensearch.URI.toIRI","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.toIRI","static":false,"abstract":true,"constant":false,"return":[{"outer":"restlib_atom/opensearch.IRI","inner":[]}],"parameters":{},"annotations":[]},"toURI":{"name":"toURI","qualifiedName":"restlib_atom/opensearch.URI.toURI","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.toURI","static":false,"abstract":true,"constant":false,"return":[{"outer":"restlib_atom/opensearch.URI","inner":[]}],"parameters":{},"annotations":[]},"toUri":{"name":"toUri","qualifiedName":"restlib_atom/opensearch.URI.toUri","comment":"","commentFrom":"","inheritedFrom":"opensearch.IRI.toUri","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}