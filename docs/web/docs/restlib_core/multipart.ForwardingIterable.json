{"name":"ForwardingIterable","qualifiedName":"restlib_core/multipart.ForwardingIterable","comment":"","isAbstract":true,"superclass":"dart-core.Object","implements":["dart-core.Iterable","restlib_core/multipart.Forwarder"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"iterator":{"name":"iterator","qualifiedName":"restlib_core/multipart.ForwardingIterable.iterator","comment":"<p>Returns an Iterator that iterates over this Iterable object.</p>","commentFrom":"dart-core.Iterable.iterator","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"restlib_core/multipart.ForwardingIterable.length","comment":"<p>Returns the number of elements in this.</p>\n<p>Counting all elements may be involve running through all elements and can\ntherefore be slow.</p>","commentFrom":"dart-core.Iterable.length","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"restlib_core/multipart.ForwardingIterable.isEmpty","comment":"<p>Returns true if there is no element in this collection.</p>","commentFrom":"dart-core.Iterable.isEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"restlib_core/multipart.ForwardingIterable.isNotEmpty","comment":"<p>Returns true if there is at least one element in this collection.</p>","commentFrom":"dart-core.Iterable.isNotEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"first":{"name":"first","qualifiedName":"restlib_core/multipart.ForwardingIterable.first","comment":"<p>Returns the first element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>. Otherwise this method is\nequivalent to <code>this.elementAt(0)</code></p>","commentFrom":"dart-core.Iterable.first","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"restlib_core/multipart.ForwardingIterable.last","comment":"<p>Returns the last element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.last","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"restlib_core/multipart.ForwardingIterable.single","comment":"<p>Returns the single element in <code>this</code>.</p>\n<p>If <code>this</code> is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.single","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"map":{"name":"map","qualifiedName":"restlib_core/multipart.ForwardingIterable.map","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> where each element <code>e</code> of <code>this</code> is replaced\nby the result of <code>f(e)</code>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>restlib_core/multipart.ForwardingIterable.map.f</a> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>restlib_core/multipart.ForwardingIterable.map.f</a> multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.map","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"restlib_core/multipart.ForwardingIterable.where","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> with all elements that satisfy the\npredicate test.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function test will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction test multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.where","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"restlib_core/multipart.ForwardingIterable.expand","comment":"<p>Expands each element of this <a>dart-core.Iterable</a> into zero or more elements.</p>\n<p>The resulting Iterable runs through the elements returned\nby <a>restlib_core/multipart.ForwardingIterable.expand.f</a> for each element of this, in order.</p>\n<p>The returned <a>dart-core.Iterable</a> is lazy, and calls <a>restlib_core/multipart.ForwardingIterable.expand.f</a> for each element\nof this every time it's iterated.</p>","commentFrom":"dart-core.Iterable.expand","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"restlib_core/multipart.ForwardingIterable.contains","comment":"<p>Returns true if the collection contains an element equal to <a>restlib_core/multipart.ForwardingIterable.contains.element</a>.</p>","commentFrom":"dart-core.Iterable.contains","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"restlib_core/multipart.ForwardingIterable.forEach","comment":"<p>Applies the function <a>restlib_core/multipart.ForwardingIterable.forEach.f</a> to each element of this collection.</p>","commentFrom":"dart-core.Iterable.forEach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"restlib_core/multipart.ForwardingIterable.reduce","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.reduce((value, element) =&gt; value + element);\n</code></pre>","commentFrom":"dart-core.Iterable.reduce","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"restlib_core/multipart.ForwardingIterable.fold","comment":"<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.</p>\n<p>Use <a>restlib_core/multipart.ForwardingIterable.fold.initialValue</a> as the initial value, and the function <a>restlib_core/multipart.ForwardingIterable.fold.combine</a> to\ncreate a new value from the previous one and an element.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n</code></pre>","commentFrom":"dart-core.Iterable.fold","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"restlib_core/multipart.ForwardingIterable.every","comment":"<p>Returns true if every elements of this collection satisify the\npredicate test. Returns <code>false</code> otherwise.</p>","commentFrom":"dart-core.Iterable.every","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"restlib_core/multipart.ForwardingIterable.join","comment":"<p>Converts each element to a <a>dart-core.String</a> and concatenates the strings.</p>\n<p>Converts each element to a <a>dart-core.String</a> by calling <a>restlib_core/multipart.ForwardingIterable.toString</a> on it.\nThen concatenates the strings, optionally separated by the <a>restlib_core/multipart.ForwardingIterable.join.separator</a>\nstring.</p>","commentFrom":"dart-core.Iterable.join","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"restlib_core/multipart.ForwardingIterable.any","comment":"<p>Returns true if one element of this collection satisfies the\npredicate test. Returns false otherwise.</p>","commentFrom":"dart-core.Iterable.any","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"restlib_core/multipart.ForwardingIterable.toList","comment":"<p>Creates a <a>dart-core.List</a> containing the elements of this <a>dart-core.Iterable</a>.</p>\n<p>The elements are in iteration order. The list is fixed-length\nif <a>restlib_core/multipart.ForwardingIterable.toList.growable</a> is false.</p>","commentFrom":"dart-core.Iterable.toList","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"restlib_core/multipart.ForwardingIterable.toSet","comment":"<p>Creates a <a>dart-core.Set</a> containing the elements of this <a>dart-core.Iterable</a>.</p>","commentFrom":"dart-core.Iterable.toSet","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{},"annotations":[]},"take":{"name":"take","qualifiedName":"restlib_core/multipart.ForwardingIterable.take","comment":"<p>Returns an <a>dart-core.Iterable</a> with at most <a>restlib_core/multipart.ForwardingIterable.take.n</a> elements.</p>\n<p>The returned <a>dart-core.Iterable</a> may contain fewer than <a>restlib_core/multipart.ForwardingIterable.take.n</a> elements, if <code>this</code>\ncontains fewer than <a>restlib_core/multipart.ForwardingIterable.take.n</a> elements.</p>\n<p>It is an error if <a>restlib_core/multipart.ForwardingIterable.take.n</a> is negative.</p>","commentFrom":"dart-core.Iterable.take","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"restlib_core/multipart.ForwardingIterable.takeWhile","comment":"<p>Returns an Iterable that stops once <a>restlib_core/multipart.ForwardingIterable.takeWhile.test</a> is not satisfied anymore.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of <code>this</code>.</p>\n<p>When the iterator encounters an element <code>e</code> that does not satisfy <a>restlib_core/multipart.ForwardingIterable.takeWhile.test</a>,\nit discards <code>e</code> and moves into the finished state. That is, it does not\nget or provide any more elements.</p>","commentFrom":"dart-core.Iterable.takeWhile","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"restlib_core/multipart.ForwardingIterable.skip","comment":"<p>Returns an Iterable that skips the first <a>restlib_core/multipart.ForwardingIterable.skip.n</a> elements.</p>\n<p>If <code>this</code> has fewer than <a>restlib_core/multipart.ForwardingIterable.skip.n</a> elements, then the resulting Iterable is\nempty.</p>\n<p>It is an error if <a>restlib_core/multipart.ForwardingIterable.skip.n</a> is negative.</p>","commentFrom":"dart-core.Iterable.skip","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"restlib_core/multipart.ForwardingIterable.skipWhile","comment":"<p>Returns an Iterable that skips elements while <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a> is satisfied.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of <code>this</code>.</p>\n<p>As long as the iterator's elements satisfy <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a> they are\ndiscarded. Once an element does not satisfy the <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a> the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of <code>this</code> starting from the\nfirst element that does not satisfy <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a>.</p>","commentFrom":"dart-core.Iterable.skipWhile","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"restlib_core/multipart.ForwardingIterable.firstWhere","comment":"<p>Returns the first element that satisfies the given predicate <a>restlib_core/multipart.ForwardingIterable.firstWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>restlib_core/multipart.ForwardingIterable.firstWhere.orElse</a> function is\nreturned. By default, when <a>restlib_core/multipart.ForwardingIterable.firstWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.firstWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"restlib_core/multipart.ForwardingIterable.lastWhere","comment":"<p>Returns the last element that satisfies the given predicate <a>restlib_core/multipart.ForwardingIterable.lastWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>restlib_core/multipart.ForwardingIterable.lastWhere.orElse</a> function is\nreturned. By default, when <a>restlib_core/multipart.ForwardingIterable.lastWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.lastWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"restlib_core/multipart.ForwardingIterable.singleWhere","comment":"<p>Returns the single element that satisfies <a>restlib_core/multipart.ForwardingIterable.singleWhere.test</a>. If no or more than one\nelement match then a <a>dart-core.StateError</a> is thrown.</p>","commentFrom":"dart-core.Iterable.singleWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"restlib_core/multipart.ForwardingIterable.elementAt","comment":"<p>Returns the <a>restlib_core/multipart.ForwardingIterable.elementAt.index</a>th element.</p>\n<p>The <a>restlib_core/multipart.ForwardingIterable.elementAt.index</a> must be non-negative and less than <a>restlib_core/multipart.ForwardingIterable.length</a>.</p>\n<p>Note: if <code>this</code> does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least <a>restlib_core/multipart.ForwardingIterable.elementAt.index</a> elements in <code>this</code>.</p>","commentFrom":"dart-core.Iterable.elementAt","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/multipart.Part","inner":[{"outer":"restlib_core/multipart._Multipart.T","inner":[]}]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"restlib_core/multipart.ForwardingIterable.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>restlib_core/multipart.ForwardingIterable.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"restlib_core/multipart.ForwardingIterable.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"restlib_core/multipart.ForwardingIterable.iterator","comment":"<p>Returns an Iterator that iterates over this Iterable object.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.iterator","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"restlib_core/multipart.ForwardingIterable.length","comment":"<p>Returns the number of elements in this.</p>\n<p>Counting all elements may be involve running through all elements and can\ntherefore be slow.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"restlib_core/multipart.ForwardingIterable.isEmpty","comment":"<p>Returns true if there is no element in this collection.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.isEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"restlib_core/multipart.ForwardingIterable.isNotEmpty","comment":"<p>Returns true if there is at least one element in this collection.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.isNotEmpty","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"first":{"name":"first","qualifiedName":"restlib_core/multipart.ForwardingIterable.first","comment":"<p>Returns the first element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>. Otherwise this method is\nequivalent to <code>this.elementAt(0)</code></p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.first","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"restlib_core/multipart.ForwardingIterable.last","comment":"<p>Returns the last element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.last","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"restlib_core/multipart.ForwardingIterable.single","comment":"<p>Returns the single element in <code>this</code>.</p>\n<p>If <code>this</code> is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.single","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"delegate":{"name":"delegate","qualifiedName":"restlib_core/multipart.ForwardingIterable.delegate","comment":"","commentFrom":"","inheritedFrom":"multipart.Forwarder.delegate","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"restlib_core/multipart.ForwardingIterable.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>restlib_core/multipart.ForwardingIterable.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>restlib_core/multipart.ForwardingIterable.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"restlib_core/multipart.ForwardingIterable.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"restlib_core/multipart.ForwardingIterable.noSuchMethod","comment":"<p><a>restlib_core/multipart.ForwardingIterable.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>restlib_core/multipart.ForwardingIterable.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>restlib_core/multipart.ForwardingIterable.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>restlib_core/multipart.ForwardingIterable.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"map":{"name":"map","qualifiedName":"restlib_core/multipart.ForwardingIterable.map","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> where each element <code>e</code> of <code>this</code> is replaced\nby the result of <code>f(e)</code>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>restlib_core/multipart.ForwardingIterable.map.f</a> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>restlib_core/multipart.ForwardingIterable.map.f</a> multiple times on the same element.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.map","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"where":{"name":"where","qualifiedName":"restlib_core/multipart.ForwardingIterable.where","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> with all elements that satisfy the\npredicate <a>restlib_core/multipart.ForwardingIterable.where.test</a>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>restlib_core/multipart.ForwardingIterable.where.test</a> will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>restlib_core/multipart.ForwardingIterable.where.test</a> multiple times on the same element.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.where","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"restlib_core/multipart.ForwardingIterable.expand","comment":"<p>Expands each element of this <a>dart-core.Iterable</a> into zero or more elements.</p>\n<p>The resulting Iterable runs through the elements returned\nby <a>restlib_core/multipart.ForwardingIterable.expand.f</a> for each element of this, in order.</p>\n<p>The returned <a>dart-core.Iterable</a> is lazy, and calls <a>restlib_core/multipart.ForwardingIterable.expand.f</a> for each element\nof this every time it's iterated.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.expand","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"restlib_core/multipart.ForwardingIterable.contains","comment":"<p>Returns true if the collection contains an element equal to <a>restlib_core/multipart.ForwardingIterable.contains.element</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.contains","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"restlib_core/multipart.ForwardingIterable.forEach","comment":"<p>Applies the function <a>restlib_core/multipart.ForwardingIterable.forEach.f</a> to each element of this collection.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.forEach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"restlib_core/multipart.ForwardingIterable.reduce","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.reduce((value, element) =&gt; value + element);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.Iterable.reduce","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"restlib_core/multipart.ForwardingIterable.fold","comment":"<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.</p>\n<p>Use <a>restlib_core/multipart.ForwardingIterable.fold.initialValue</a> as the initial value, and the function <a>restlib_core/multipart.ForwardingIterable.fold.combine</a> to\ncreate a new value from the previous one and an element.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n</code></pre>","commentFrom":"","inheritedFrom":"dart-core.Iterable.fold","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"restlib_core/multipart.ForwardingIterable.every","comment":"<p>Returns true if every elements of this collection satisify the\npredicate <a>restlib_core/multipart.ForwardingIterable.every.test</a>. Returns <code>false</code> otherwise.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.every","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"restlib_core/multipart.ForwardingIterable.join","comment":"<p>Converts each element to a <a>dart-core.String</a> and concatenates the strings.</p>\n<p>Converts each element to a <a>dart-core.String</a> by calling <a>restlib_core/multipart.ForwardingIterable.toString</a> on it.\nThen concatenates the strings, optionally separated by the <a>restlib_core/multipart.ForwardingIterable.join.separator</a>\nstring.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"restlib_core/multipart.ForwardingIterable.any","comment":"<p>Returns true if one element of this collection satisfies the\npredicate <a>restlib_core/multipart.ForwardingIterable.any.test</a>. Returns false otherwise.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.any","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"restlib_core/multipart.ForwardingIterable.toList","comment":"<p>Creates a <a>dart-core.List</a> containing the elements of this <a>dart-core.Iterable</a>.</p>\n<p>The elements are in iteration order. The list is fixed-length\nif <a>restlib_core/multipart.ForwardingIterable.toList.growable</a> is false.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.toList","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"restlib_core/multipart.ForwardingIterable.toSet","comment":"<p>Creates a <a>dart-core.Set</a> containing the elements of this <a>dart-core.Iterable</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.toSet","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"take":{"name":"take","qualifiedName":"restlib_core/multipart.ForwardingIterable.take","comment":"<p>Returns an <a>dart-core.Iterable</a> with at most <a>restlib_core/multipart.ForwardingIterable.take.n</a> elements.</p>\n<p>The returned <a>dart-core.Iterable</a> may contain fewer than <a>restlib_core/multipart.ForwardingIterable.take.n</a> elements, if <code>this</code>\ncontains fewer than <a>restlib_core/multipart.ForwardingIterable.take.n</a> elements.</p>\n<p>It is an error if <a>restlib_core/multipart.ForwardingIterable.take.n</a> is negative.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.take","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"restlib_core/multipart.ForwardingIterable.takeWhile","comment":"<p>Returns an Iterable that stops once <a>restlib_core/multipart.ForwardingIterable.takeWhile.test</a> is not satisfied anymore.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of <code>this</code>.</p>\n<p>When the iterator encounters an element <code>e</code> that does not satisfy <a>restlib_core/multipart.ForwardingIterable.takeWhile.test</a>,\nit discards <code>e</code> and moves into the finished state. That is, it does not\nget or provide any more elements.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.takeWhile","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"restlib_core/multipart.ForwardingIterable.skip","comment":"<p>Returns an Iterable that skips the first <a>restlib_core/multipart.ForwardingIterable.skip.n</a> elements.</p>\n<p>If <code>this</code> has fewer than <a>restlib_core/multipart.ForwardingIterable.skip.n</a> elements, then the resulting Iterable is\nempty.</p>\n<p>It is an error if <a>restlib_core/multipart.ForwardingIterable.skip.n</a> is negative.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.skip","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"restlib_core/multipart.ForwardingIterable.skipWhile","comment":"<p>Returns an Iterable that skips elements while <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a> is satisfied.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of <code>this</code>.</p>\n<p>As long as the iterator's elements satisfy <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a> they are\ndiscarded. Once an element does not satisfy the <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a> the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of <code>this</code> starting from the\nfirst element that does not satisfy <a>restlib_core/multipart.ForwardingIterable.skipWhile.test</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.skipWhile","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"restlib_core/multipart.ForwardingIterable.firstWhere","comment":"<p>Returns the first element that satisfies the given predicate <a>restlib_core/multipart.ForwardingIterable.firstWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>restlib_core/multipart.ForwardingIterable.firstWhere.orElse</a> function is\nreturned. By default, when <a>restlib_core/multipart.ForwardingIterable.firstWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.firstWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"restlib_core/multipart.ForwardingIterable.lastWhere","comment":"<p>Returns the last element that satisfies the given predicate <a>restlib_core/multipart.ForwardingIterable.lastWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>restlib_core/multipart.ForwardingIterable.lastWhere.orElse</a> function is\nreturned. By default, when <a>restlib_core/multipart.ForwardingIterable.lastWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.lastWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"restlib_core/multipart.ForwardingIterable.singleWhere","comment":"<p>Returns the single element that satisfies <a>restlib_core/multipart.ForwardingIterable.singleWhere.test</a>. If no or more than one\nelement match then a <a>dart-core.StateError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.singleWhere","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"restlib_core/multipart.ForwardingIterable.elementAt","comment":"<p>Returns the <a>restlib_core/multipart.ForwardingIterable.elementAt.index</a>th element.</p>\n<p>The <a>restlib_core/multipart.ForwardingIterable.elementAt.index</a> must be non-negative and less than <a>restlib_core/multipart.ForwardingIterable.length</a>.</p>\n<p>Note: if <code>this</code> does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least <a>restlib_core/multipart.ForwardingIterable.elementAt.index</a> elements in <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.Iterable.elementAt","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{"E":{"name":"E","type":"dart.core.Object"}}}