{"name":"CookieAttribute","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute","comment":"","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"HTTP_ONLY":{"name":"HTTP_ONLY","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.HTTP_ONLY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"annotations":[]},"SECURE":{"name":"SECURE","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.SECURE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"expiresOn":{"name":"expiresOn","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.CookieAttribute-expiresOn","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"parameters":{"date":{"name":"date","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"extension":{"name":"extension","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.CookieAttribute-extension","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"maxAge":{"name":"maxAge","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.CookieAttribute-maxAge","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"parameters":{"maxAge":{"name":"maxAge","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"domain":{"name":"domain","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.CookieAttribute-domain","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"parameters":{"domain":{"name":"domain","optional":false,"named":false,"default":false,"type":[{"outer":"restlib_core/restlib-core-net.DomainName","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"path":{"name":"path","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.CookieAttribute-path","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"restlib_core/restlib-core-data.CookieAttribute","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"restlib_core/restlib-core-net.Path","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>restlib_core/restlib-core-data.CookieAttribute.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>restlib_core/restlib-core-data.CookieAttribute.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>restlib_core/restlib-core-data.CookieAttribute.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"restlib_core/restlib-core-data.CookieAttribute.noSuchMethod","comment":"<p><a>restlib_core/restlib-core-data.CookieAttribute.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>restlib_core/restlib-core-data.CookieAttribute.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>restlib_core/restlib-core-data.CookieAttribute.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>restlib_core/restlib-core-data.CookieAttribute.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}